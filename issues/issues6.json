[
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2468",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2468/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2468/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2468/events",
    "html_url": "https://github.com/strongloop/express/pull/2468",
    "id": 51770042,
    "number": 2468,
    "title": "req.fresh throws when no response headers are set",
    "user": {
      "login": "troygoode",
      "id": 72844,
      "avatar_url": "https://avatars.githubusercontent.com/u/72844?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/troygoode",
      "html_url": "https://github.com/troygoode",
      "followers_url": "https://api.github.com/users/troygoode/followers",
      "following_url": "https://api.github.com/users/troygoode/following{/other_user}",
      "gists_url": "https://api.github.com/users/troygoode/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/troygoode/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/troygoode/subscriptions",
      "organizations_url": "https://api.github.com/users/troygoode/orgs",
      "repos_url": "https://api.github.com/users/troygoode/repos",
      "events_url": "https://api.github.com/users/troygoode/events{/privacy}",
      "received_events_url": "https://api.github.com/users/troygoode/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/3.x",
        "name": "3.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 6,
    "created_at": "2014-12-12T04:39:42Z",
    "updated_at": "2014-12-13T05:48:33Z",
    "closed_at": "2014-12-13T03:07:15Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2468",
      "html_url": "https://github.com/strongloop/express/pull/2468",
      "diff_url": "https://github.com/strongloop/express/pull/2468.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2468.patch"
    },
    "body": "Currently any request to a simplistic Express app like so will fail with a 500 because [jshttp/fresh](https://github.com/jshttp/fresh) does not expect a response's headers to be `undefined`:\r\n\r\n```javascript\r\n(function () {\r\n  'use strict';\r\n\r\n  var app = require('express')();\r\n\r\n  app.disable('x-powered-by'); // no default headers are set, so `res.headers` is now `undefined`\r\n\r\n  app.get('/', function (req, res) {\r\n    res.status(204).send();\r\n  });\r\n\r\n  module.exports = app;\r\n\r\n}());\r\n```\r\n\r\nThis Pull Request ensures that at the very least an empty hash is sent to [jshttp/fresh](https://github.com/jshttp/fresh) to prevent requests to that application from erroring out with a 500."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2467",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2467/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2467/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2467/events",
    "html_url": "https://github.com/strongloop/express/issues/2467",
    "id": 51585534,
    "number": 2467,
    "title": "res.send calls res.end twice for HEAD requests",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-12-10T17:21:02Z",
    "updated_at": "2014-12-10T17:26:14Z",
    "closed_at": "2014-12-10T17:26:14Z",
    "body": "This is the cause of https://github.com/expressjs/compression/issues/23"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2466",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2466/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2466/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2466/events",
    "html_url": "https://github.com/strongloop/express/issues/2466",
    "id": 51545540,
    "number": 2466,
    "title": "GET method and request.body",
    "user": {
      "login": "Fabryprog",
      "id": 8210189,
      "avatar_url": "https://avatars.githubusercontent.com/u/8210189?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fabryprog",
      "html_url": "https://github.com/Fabryprog",
      "followers_url": "https://api.github.com/users/Fabryprog/followers",
      "following_url": "https://api.github.com/users/Fabryprog/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fabryprog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fabryprog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fabryprog/subscriptions",
      "organizations_url": "https://api.github.com/users/Fabryprog/orgs",
      "repos_url": "https://api.github.com/users/Fabryprog/repos",
      "events_url": "https://api.github.com/users/Fabryprog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fabryprog/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2014-12-10T11:06:36Z",
    "updated_at": "2014-12-30T18:36:33Z",
    "closed_at": "2014-12-30T14:54:04Z",
    "body": "Hello everyone,\r\n\r\nI am using a GET method\r\n\r\naccording to http://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods \r\n\r\nI want to access on request.body. How to do it? \r\n\r\nI am using body-parser and my request body is always empty!\r\n\r\ntnkx "
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2465",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2465/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2465/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2465/events",
    "html_url": "https://github.com/strongloop/express/issues/2465",
    "id": 51373766,
    "number": 2465,
    "title": "Potential DOS attack using large array query params",
    "user": {
      "login": "YukonSaint",
      "id": 4625659,
      "avatar_url": "https://avatars.githubusercontent.com/u/4625659?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/YukonSaint",
      "html_url": "https://github.com/YukonSaint",
      "followers_url": "https://api.github.com/users/YukonSaint/followers",
      "following_url": "https://api.github.com/users/YukonSaint/following{/other_user}",
      "gists_url": "https://api.github.com/users/YukonSaint/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/YukonSaint/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/YukonSaint/subscriptions",
      "organizations_url": "https://api.github.com/users/YukonSaint/orgs",
      "repos_url": "https://api.github.com/users/YukonSaint/repos",
      "events_url": "https://api.github.com/users/YukonSaint/events{/privacy}",
      "received_events_url": "https://api.github.com/users/YukonSaint/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/3.x",
        "name": "3.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 13,
    "created_at": "2014-12-09T00:44:45Z",
    "updated_at": "2014-12-09T02:24:30Z",
    "closed_at": "2014-12-09T01:25:57Z",
    "body": "Hi, our security team is worried about a potential DOS attack by overloading express with gigantic arrays as parameters. I was able to kill my dev node/express instance (`FATAL ERROR: CALL_AND_RETRY_2 Allocation failed - process out of memory`) just by hitting the following url several times: `http://localhost:3000/test?dummyParam[0][50000000]=asdf`\r\n\r\nNote that nothing in my code is looking for or processing dummyParam, nor am I outputting the entire `req.query` object to console or anything else.\r\n\r\nHowever if I lower the array down to something reasonable and output `req.query` I get the following for: `http://localhost:3000/test?dummyParam[0][50]=asdf`\r\n\r\nI get in the console:\r\n```\r\n{\"dummyParam\":[[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\"asdf\"]]}\r\n```\r\nYou can see how this object gets gigantic really quickly just by making a query parameter a gigantic array. Is this something that has been discussed or dealt with in express? Or not a concern? I googled around and searched through the issues here and couldn't find anything.\r\n\r\nThank you very much for your help."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2464",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2464/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2464/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2464/events",
    "html_url": "https://github.com/strongloop/express/issues/2464",
    "id": 51320686,
    "number": 2464,
    "title": "\"bad request\" stack dump visiting /% iff express.static turned on ",
    "user": {
      "login": "malgorithms",
      "id": 614943,
      "avatar_url": "https://avatars.githubusercontent.com/u/614943?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/malgorithms",
      "html_url": "https://github.com/malgorithms",
      "followers_url": "https://api.github.com/users/malgorithms/followers",
      "following_url": "https://api.github.com/users/malgorithms/following{/other_user}",
      "gists_url": "https://api.github.com/users/malgorithms/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/malgorithms/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/malgorithms/subscriptions",
      "organizations_url": "https://api.github.com/users/malgorithms/orgs",
      "repos_url": "https://api.github.com/users/malgorithms/repos",
      "events_url": "https://api.github.com/users/malgorithms/events{/privacy}",
      "received_events_url": "https://api.github.com/users/malgorithms/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-12-08T16:24:20Z",
    "updated_at": "2014-12-08T21:34:28Z",
    "closed_at": "2014-12-08T16:39:15Z",
    "body": "In a clean Express app (4.10.4), visiting a bad URL typically outputs this kind of thing:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/614943/5342385/acc429e4-7ecb-11e4-8c07-5c91064de183.png)\r\n\r\nThis is also true when visiting a fishier URL, one with a `%` in it:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/614943/5342408/dc428602-7ecb-11e4-8e2c-a6efc5483a5f.png)\r\n\r\nHowever, if you turn on express's static handler:\r\n\r\n```\r\nexpress = require 'express'\r\npath    = require 'path'\r\napp     = express()\r\n\r\napp.use express.static path.join(__dirname, 'public')\r\n\r\napp.get '/', (req, res) -> res.send \"hi\"\r\n\r\napp.listen 3000\r\n```\r\n\r\nThis bad URL case dumps a big stack to both the screen and the logs:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/614943/5342439/17ef5a2c-7ecc-11e4-9335-285164c94d4d.png)\r\n\r\nAs far as I can tell, this bad URL shouldn't be handled by `express.static` at all, should it? It doesn't match the path passed to express.static.\r\n\r\nShould I be handling this error case somehow, or is there a bug in `static`?\r\n\r\nHere's the stack as text, not a screenshot:\r\n\r\n```\r\nError: Bad Request\r\n  at SendStream.error (/Users/chris/tmp/node_modules/express/node_modules/send/index.js:239:16)\r\n  at SendStream.pipe (/Users/chris/tmp/node_modules/express/node_modules/send/index.js:411:32)\r\n  at serveStatic (/Users/chris/tmp/node_modules/express/node_modules/serve-static/index.js:107:12)\r\n  at Layer.handle [as handle_request] (/Users/chris/tmp/node_modules/express/lib/router/layer.js:82:5)\r\n  at trim_prefix (/Users/chris/tmp/node_modules/express/lib/router/index.js:271:13)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:238:9\r\n  at Function.proto.process_params (/Users/chris/tmp/node_modules/express/lib/router/index.js:313:12)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:229:12\r\n  at Function.match_layer (/Users/chris/tmp/node_modules/express/lib/router/index.js:296:3)\r\n  at next (/Users/chris/tmp/node_modules/express/lib/router/index.js:190:10)\r\n  at expressInit (/Users/chris/tmp/node_modules/express/lib/middleware/init.js:23:5)\r\n  at Layer.handle [as handle_request] (/Users/chris/tmp/node_modules/express/lib/router/layer.js:82:5)\r\n  at trim_prefix (/Users/chris/tmp/node_modules/express/lib/router/index.js:271:13)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:238:9\r\n  at Function.proto.process_params (/Users/chris/tmp/node_modules/express/lib/router/index.js:313:12)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:229:12\r\n  at Function.match_layer (/Users/chris/tmp/node_modules/express/lib/router/index.js:296:3)\r\n  at next (/Users/chris/tmp/node_modules/express/lib/router/index.js:190:10)\r\n  at query (/Users/chris/tmp/node_modules/express/lib/middleware/query.js:28:5)\r\n  at Layer.handle [as handle_request] (/Users/chris/tmp/node_modules/express/lib/router/layer.js:82:5)\r\n  at trim_prefix (/Users/chris/tmp/node_modules/express/lib/router/index.js:271:13)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:238:9\r\n  at Function.proto.process_params (/Users/chris/tmp/node_modules/express/lib/router/index.js:313:12)\r\n  at /Users/chris/tmp/node_modules/express/lib/router/index.js:229:12\r\n  at Function.match_layer (/Users/chris/tmp/node_modules/express/lib/router/index.js:296:3)\r\n  at next (/Users/chris/tmp/node_modules/express/lib/router/index.js:190:10)\r\n  at Function.proto.handle (/Users/chris/tmp/node_modules/express/lib/router/index.js:165:3)\r\n  at EventEmitter.app.handle (/Users/chris/tmp/node_modules/express/lib/application.js:141:10)\r\n  at Server.app (/Users/chris/tmp/node_modules/express/lib/express.js:28:9)\r\n  at Server.emit (events.js:98:17)\r\n  at HTTPParser.parser.onIncoming (http.js:2112:12)\r\n  at HTTPParser.parserOnHeadersComplete [as onHeadersComplete] (http.js:121:23)\r\n  at Socket.socket.ondata (http.js:1970:22)\r\n  at TCP.onread (net.js:527:27)\r\n```\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2463",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2463/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2463/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2463/events",
    "html_url": "https://github.com/strongloop/express/issues/2463",
    "id": 51295356,
    "number": 2463,
    "title": "File parser in express",
    "user": {
      "login": "morwalz",
      "id": 3679081,
      "avatar_url": "https://avatars.githubusercontent.com/u/3679081?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morwalz",
      "html_url": "https://github.com/morwalz",
      "followers_url": "https://api.github.com/users/morwalz/followers",
      "following_url": "https://api.github.com/users/morwalz/following{/other_user}",
      "gists_url": "https://api.github.com/users/morwalz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morwalz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morwalz/subscriptions",
      "organizations_url": "https://api.github.com/users/morwalz/orgs",
      "repos_url": "https://api.github.com/users/morwalz/repos",
      "events_url": "https://api.github.com/users/morwalz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morwalz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-12-08T12:07:51Z",
    "updated_at": "2014-12-08T15:08:20Z",
    "closed_at": "2014-12-08T15:08:20Z",
    "body": "Hi All, \r\nI am working on file uploader module with express.js. \r\nto parse a post call with file there are multiple file parsors like multer. they store the file at temporary location and provide us path of that. \r\nBasically i want dont want to do this way. I dont want to store at temporary location. I directly want to get stream of uploaded file for further operation on file. \r\n\r\nany help on this ?"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2462",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2462/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2462/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2462/events",
    "html_url": "https://github.com/strongloop/express/issues/2462",
    "id": 51291682,
    "number": 2462,
    "title": "Problem with routes containing dots and numbers",
    "user": {
      "login": "jakelucas",
      "id": 5120461,
      "avatar_url": "https://avatars.githubusercontent.com/u/5120461?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jakelucas",
      "html_url": "https://github.com/jakelucas",
      "followers_url": "https://api.github.com/users/jakelucas/followers",
      "following_url": "https://api.github.com/users/jakelucas/following{/other_user}",
      "gists_url": "https://api.github.com/users/jakelucas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jakelucas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jakelucas/subscriptions",
      "organizations_url": "https://api.github.com/users/jakelucas/orgs",
      "repos_url": "https://api.github.com/users/jakelucas/repos",
      "events_url": "https://api.github.com/users/jakelucas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jakelucas/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/3.x",
        "name": "3.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-12-08T11:18:30Z",
    "updated_at": "2014-12-12T14:56:58Z",
    "closed_at": "2014-12-08T11:28:15Z",
    "body": "If I create the following route:\r\n\r\n```javascript\r\napp.get('/:foo', function(req, res) {\r\n  res.send('');\r\n});\r\n```\r\n\r\nThen go to `/0.1.0` I get a `Cannot GET /0.1.0` message.\r\n\r\nSo:\r\n`/0.1.0` is broken\r\n`/0.1.2` works fine\r\n`/1.1.0` works fine\r\n`/0.12.0` works fine\r\n`/0.1..0` works fine\r\n`/0..1.0` works fine\r\n`/a.b.c` works fine"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2461",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2461/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2461/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2461/events",
    "html_url": "https://github.com/strongloop/express/pull/2461",
    "id": 51205367,
    "number": 2461,
    "title": "Merge pull request #1 from visionmedia/master",
    "user": {
      "login": "jnbhw",
      "id": 2999730,
      "avatar_url": "https://avatars.githubusercontent.com/u/2999730?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnbhw",
      "html_url": "https://github.com/jnbhw",
      "followers_url": "https://api.github.com/users/jnbhw/followers",
      "following_url": "https://api.github.com/users/jnbhw/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnbhw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnbhw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnbhw/subscriptions",
      "organizations_url": "https://api.github.com/users/jnbhw/orgs",
      "repos_url": "https://api.github.com/users/jnbhw/repos",
      "events_url": "https://api.github.com/users/jnbhw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnbhw/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/invalid",
        "name": "invalid",
        "color": "e6e6e6"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2014-12-07T03:02:42Z",
    "updated_at": "2014-12-07T03:52:22Z",
    "closed_at": "2014-12-07T03:06:48Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2461",
      "html_url": "https://github.com/strongloop/express/pull/2461",
      "diff_url": "https://github.com/strongloop/express/pull/2461.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2461.patch"
    },
    "body": "update"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2460",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2460/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2460/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2460/events",
    "html_url": "https://github.com/strongloop/express/issues/2460",
    "id": 51180789,
    "number": 2460,
    "title": "How do I read a JSON query string?",
    "user": {
      "login": "OliPelz",
      "id": 2950651,
      "avatar_url": "https://avatars.githubusercontent.com/u/2950651?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OliPelz",
      "html_url": "https://github.com/OliPelz",
      "followers_url": "https://api.github.com/users/OliPelz/followers",
      "following_url": "https://api.github.com/users/OliPelz/following{/other_user}",
      "gists_url": "https://api.github.com/users/OliPelz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OliPelz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OliPelz/subscriptions",
      "organizations_url": "https://api.github.com/users/OliPelz/orgs",
      "repos_url": "https://api.github.com/users/OliPelz/repos",
      "events_url": "https://api.github.com/users/OliPelz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OliPelz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 4,
    "created_at": "2014-12-06T12:18:24Z",
    "updated_at": "2014-12-06T18:22:38Z",
    "closed_at": "2014-12-06T16:28:49Z",
    "body": "Dear developers,\r\n\r\nI have a problem with express.js JSON string parsing coming from a GET requests. \r\n\r\nOn the client-side I use jQuery's datatables which produces valid JSON (I have checked) and sends it to my express.js server with contentType \"application/json;charset=utf-8\" and http GET method.\r\n\r\nHere is the exact client-side code I use:\r\nhttps://gist.github.com/OliPelz/7d46ac01e888b6fd2829\r\n\r\nhere is the extracted GET URL from loading the page above:\r\n```\r\nhttp://localhost:3000/ajax/phenotypes/withOrg/like/datatables/?[{%22name%22:%22draw%22,%22value%22:1},{%22name%22:%22columns%22,%22value%22:[{%22data%22:0,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}},{%22data%22:1,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}}]},{%22name%22:%22order%22,%22value%22:[{%22column%22:0,%22dir%22:%22asc%22}]},{%22name%22:%22start%22,%22value%22:0},{%22name%22:%22length%22,%22value%22:10},{%22name%22:%22search%22,%22value%22:{%22value%22:%22%22,%22regex%22:false}}]\r\n```\r\nas decoded URL for better viewing experience:\r\n```\r\nhttp://localhost:3000/ajax/phenotypes/withOrg/like/datatables/?[{\"name\":\"draw\",\"value\":1},{\"name\":\"columns\",\"value\":[{\"data\":0,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":1,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}}]},{\"name\":\"order\",\"value\":[{\"column\":0,\"dir\":\"asc\"}]},{\"name\":\"start\",\"value\":0},{\"name\":\"length\",\"value\":10},{\"name\":\"search\",\"value\":{\"value\":\"\",\"regex\":false}}]\r\n```\r\n\r\nor here the JSON string extracted and prettyprinted with JSLINT (which validated it as \"Valid JSON\")\r\nhttps://gist.github.com/OliPelz/8cf40a2246f843321007\r\n\r\nNow on the express.js server-side I use the normal mechanism to parse the received string from the GET request and process it:\r\n```javascript\r\n router.get('/withOrg/like/datatables/', function (req, res) {\r\n\tconsole.log(\"req.query output\");\r\n\tconsole.log(req.query);\r\n\tvar parsedContent = JSON.parse(req.query);\r\n\t//... work with parsedContent\r\n```\r\n\r\nThe problem here is that the query parameters cannot be decoded, it is no valid JSON and it cannot be parsed, here is the server console output, note the weird json string\r\n```\r\nGET /STATIC.datatableTest.html 304 30.231 ms - -\r\nreq.query output\r\n{ '{\"data\":0,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":1,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}}': { '{\"column\":0,\"dir\":\"asc\"}': '' } }\r\nGET /ajax/phenotypes/withOrg/like/datatables/?[{%22name%22:%22draw%22,%22value%22:1},{%22name%22:%22columns%22,%22value%22:[{%22data%22:0,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}},{%22data%22:1,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}}]},{%22name%22:%22order%22,%22value%22:[{%22column%22:0,%22dir%22:%22asc%22}]},{%22name%22:%22start%22,%22value%22:0},{%22name%22:%22length%22,%22value%22:10},{%22name%22:%22search%22,%22value%22:{%22value%22:%22%22,%22regex%22:false}}] 500 1331.073 ms - 1397\r\n```\r\nand following parse error (which is obious when looking at the received query.output)\r\n```\r\nUnexpected token u\r\n\r\nSyntaxError: Unexpected token u\r\n    at Object.parse (native)\r\n    at module.exports (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/routes/phenotypesAJAX.js:16:19)\r\n    at Layer.handle [as handle_request] (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/layer.js:82:5)\r\n    at next (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/route.js:100:13)\r\n    at Route.dispatch (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/route.js:81:3)\r\n    at Layer.handle [as handle_request] (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/layer.js:82:5)\r\n    at /Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:234:24\r\n    at Function.proto.process_params (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:312:12)\r\n    at /Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:228:12\r\n    at Function.match_layer (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:295:3)\r\n```\r\n\r\nIve also tried with a \"url\" approach\r\nthe json request string looks different but is also not in right JSON format\r\n\r\n```javascript\r\n router.get('/withOrg/like/datatables/', function (req, res) {\r\n\t//another try\r\n\tconsole.log('url parse output');\r\n\tconsole.log(url.parse(req.url, true).query);\r\n\tconsole.log('output parsed json object using JSON.parse');\r\n\tvar myObj = JSON.parse(url.parse(req.url, true).query);\r\n```\r\ndifferent json string output:\r\n```javascript\r\nGET /STATIC.datatableTest.html 304 27.207 ms - -\r\nurl parse output\r\n{ '[{\"name\":\"draw\",\"value\":1},{\"name\":\"columns\",\"value\":[{\"data\":0,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":1,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}}]},{\"name\":\"order\",\"value\":[{\"column\":0,\"dir\":\"asc\"}]},{\"name\":\"start\",\"value\":0},{\"name\":\"length\",\"value\":10},{\"name\":\"search\",\"value\":{\"value\":\"\",\"regex\":false}}]': '' }\r\noutput parsed json object using JSON.parse\r\nGET /ajax/phenotypes/withOrg/like/datatables/?[{%22name%22:%22draw%22,%22value%22:1},{%22name%22:%22columns%22,%22value%22:[{%22data%22:0,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}},{%22data%22:1,%22name%22:%22%22,%22searchable%22:true,%22orderable%22:true,%22search%22:{%22value%22:%22%22,%22regex%22:false}}]},{%22name%22:%22order%22,%22value%22:[{%22column%22:0,%22dir%22:%22asc%22}]},{%22name%22:%22start%22,%22value%22:0},{%22name%22:%22length%22,%22value%22:10},{%22name%22:%22search%22,%22value%22:{%22value%22:%22%22,%22regex%22:false}}] 500 765.225 ms - 1397\r\n```\r\nresulting in the same error\r\n```\r\nUnexpected token o\r\n\r\nSyntaxError: Unexpected token o\r\n    at Object.parse (native)\r\n    at module.exports (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/routes/phenotypesAJAX.js:22:19)\r\n    at Layer.handle [as handle_request] (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/layer.js:82:5)\r\n    at next (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/route.js:100:13)\r\n    at Route.dispatch (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/route.js:81:3)\r\n    at Layer.handle [as handle_request] (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/layer.js:82:5)\r\n    at /Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:234:24\r\n    at Function.proto.process_params (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:312:12)\r\n    at /Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:228:12\r\n    at Function.match_layer (/Users/oliver/Git/TestApp/TestApp-MEAN/genomernai-MEAN/node_modules/express/lib/router/index.js:295:3)\r\n```\r\n\r\nI think the express reading/decoding mechanism of the raw url string has some bugs because I can make it work with the following quick fix by processing the \"raw\" URL parameters manually\r\n\r\n```javascript\r\n router.get('/withOrg/like/datatables/', function (req, res) {\t\r\n\tvar params = url.parse(req.url, true).path.split(\"?\")[1];\r\n\tconsole.log(params);\r\n\tvar params_decoded = decodeURIComponent(params);\r\n\tconsole.log(params_decoded);\r\n\tvar myObj = JSON.parse(params_decoded);\r\n\tconsole.log(\"hello \" +myObj[0]);\r\n\tconsole.log(\"name \" +myObj[0].name);\r\n\tconsole.log(\"value \" +myObj[0].value);\r\n\t\r\n})\r\n```\r\nThe code above results in a working javascript object parsed from the JSON string which I can access correctly!\r\nOutput:\r\n```\r\n[{\"name\":\"draw\",\"value\":1},{\"name\":\"columns\",\"value\":[{\"data\":0,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}},{\"data\":1,\"name\":\"\",\"searchable\":true,\"orderable\":true,\"search\":{\"value\":\"\",\"regex\":false}}]},{\"name\":\"order\",\"value\":[{\"column\":0,\"dir\":\"asc\"}]},{\"name\":\"start\",\"value\":0},{\"name\":\"length\",\"value\":10},{\"name\":\"search\",\"value\":{\"value\":\"\",\"regex\":false}}]\r\nhello [object Object]\r\nname draw\r\nvalue 1\r\n```\r\n\r\nIs this a bug and can be confimed or am I doing something completely stupid here?\r\n\r\nI am not behind some proxy, just developing on localhost without any network restrictions.\r\n\r\nThank you for your help\r\n\r\nBest,\r\nOliver"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2459",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2459/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2459/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2459/events",
    "html_url": "https://github.com/strongloop/express/issues/2459",
    "id": 50798136,
    "number": 2459,
    "title": "Add HEAD to Allow header in response to OPTIONS when a GET is supported",
    "user": {
      "login": "moll",
      "id": 156837,
      "avatar_url": "https://avatars.githubusercontent.com/u/156837?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moll",
      "html_url": "https://github.com/moll",
      "followers_url": "https://api.github.com/users/moll/followers",
      "following_url": "https://api.github.com/users/moll/following{/other_user}",
      "gists_url": "https://api.github.com/users/moll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moll/subscriptions",
      "organizations_url": "https://api.github.com/users/moll/orgs",
      "repos_url": "https://api.github.com/users/moll/repos",
      "events_url": "https://api.github.com/users/moll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/3.x",
        "name": "3.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 1,
    "created_at": "2014-12-03T07:57:21Z",
    "updated_at": "2015-01-14T03:28:59Z",
    "closed_at": "2015-01-14T03:28:59Z",
    "body": "Currently it will only contain a `GET` in the `Allow` header. Express synthesizes a `HEAD` anyhow though."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2458",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2458/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2458/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2458/events",
    "html_url": "https://github.com/strongloop/express/issues/2458",
    "id": 50797738,
    "number": 2458,
    "title": "Allow header in response to OPTIONS contains duplicate methods",
    "user": {
      "login": "moll",
      "id": 156837,
      "avatar_url": "https://avatars.githubusercontent.com/u/156837?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/moll",
      "html_url": "https://github.com/moll",
      "followers_url": "https://api.github.com/users/moll/followers",
      "following_url": "https://api.github.com/users/moll/following{/other_user}",
      "gists_url": "https://api.github.com/users/moll/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/moll/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/moll/subscriptions",
      "organizations_url": "https://api.github.com/users/moll/orgs",
      "repos_url": "https://api.github.com/users/moll/repos",
      "events_url": "https://api.github.com/users/moll/events{/privacy}",
      "received_events_url": "https://api.github.com/users/moll/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 0,
    "created_at": "2014-12-03T07:54:01Z",
    "updated_at": "2015-01-05T00:07:51Z",
    "closed_at": "2015-01-05T00:07:51Z",
    "body": "Should you have duplicate handlers for a single method, the `Allow` header in response to `OPTIONS` will contain the same method twice. E.g. `GET, GET, POST`."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2457",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2457/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2457/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2457/events",
    "html_url": "https://github.com/strongloop/express/issues/2457",
    "id": 50759716,
    "number": 2457,
    "title": "One-time middleware?",
    "user": {
      "login": "ilanbiala",
      "id": 3695164,
      "avatar_url": "https://avatars.githubusercontent.com/u/3695164?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ilanbiala",
      "html_url": "https://github.com/ilanbiala",
      "followers_url": "https://api.github.com/users/ilanbiala/followers",
      "following_url": "https://api.github.com/users/ilanbiala/following{/other_user}",
      "gists_url": "https://api.github.com/users/ilanbiala/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ilanbiala/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ilanbiala/subscriptions",
      "organizations_url": "https://api.github.com/users/ilanbiala/orgs",
      "repos_url": "https://api.github.com/users/ilanbiala/repos",
      "events_url": "https://api.github.com/users/ilanbiala/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ilanbiala/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 18,
    "created_at": "2014-12-03T01:23:35Z",
    "updated_at": "2014-12-04T15:17:08Z",
    "closed_at": "2014-12-03T03:15:07Z",
    "body": "Is there such a thing as a one-time middleware for express? Something to just run on the first request?"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2456",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2456/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2456/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2456/events",
    "html_url": "https://github.com/strongloop/express/issues/2456",
    "id": 50507778,
    "number": 2456,
    "title": "How can I know response Content-Type?",
    "user": {
      "login": "lmk123",
      "id": 5035625,
      "avatar_url": "https://avatars.githubusercontent.com/u/5035625?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lmk123",
      "html_url": "https://github.com/lmk123",
      "followers_url": "https://api.github.com/users/lmk123/followers",
      "following_url": "https://api.github.com/users/lmk123/following{/other_user}",
      "gists_url": "https://api.github.com/users/lmk123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lmk123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lmk123/subscriptions",
      "organizations_url": "https://api.github.com/users/lmk123/orgs",
      "repos_url": "https://api.github.com/users/lmk123/repos",
      "events_url": "https://api.github.com/users/lmk123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lmk123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2014-12-01T10:21:04Z",
    "updated_at": "2014-12-04T05:03:15Z",
    "closed_at": "2014-12-01T17:58:52Z",
    "body": "I want to write a middleware to do something before a response send a `text/html` ,for example:\r\n```js\r\napp.use(function( req, res, next ) {\r\n    res.set({\r\n        'Cache-Control' : 'public, max-age=60' , // I want a different max-age if it is text/html\r\n        'X-Frame-Options' : 'DENY'\r\n    });\r\n    next();\r\n});\r\n```\r\nBut how can I kown the response Content-Type? ( Such as use `res.send()` , `res.render()` or `res.sendFile()` )\r\n\r\nOr any events will be trigger before a response send , such as \"beforeSend\" can let me know the Content-Type?"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2455",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2455/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2455/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2455/events",
    "html_url": "https://github.com/strongloop/express/pull/2455",
    "id": 50505207,
    "number": 2455,
    "title": "Add append option for setting response headers.",
    "user": {
      "login": "izaakschroeder",
      "id": 206921,
      "avatar_url": "https://avatars.githubusercontent.com/u/206921?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izaakschroeder",
      "html_url": "https://github.com/izaakschroeder",
      "followers_url": "https://api.github.com/users/izaakschroeder/followers",
      "following_url": "https://api.github.com/users/izaakschroeder/following{/other_user}",
      "gists_url": "https://api.github.com/users/izaakschroeder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izaakschroeder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izaakschroeder/subscriptions",
      "organizations_url": "https://api.github.com/users/izaakschroeder/orgs",
      "repos_url": "https://api.github.com/users/izaakschroeder/repos",
      "events_url": "https://api.github.com/users/izaakschroeder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izaakschroeder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 6,
    "created_at": "2014-12-01T09:52:17Z",
    "updated_at": "2015-01-14T03:28:59Z",
    "closed_at": "2015-01-14T03:28:59Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2455",
      "html_url": "https://github.com/strongloop/express/pull/2455",
      "diff_url": "https://github.com/strongloop/express/pull/2455.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2455.patch"
    },
    "body": "By default both express and node opt replace any header you set which makes it somewhat inconvenient when you need to append a header instead of replace one. A third parameter to `res.set` now controls whether or not the header is set or appended.\r\n\r\nThe default behavior remains the same as before (so all existing code works as usual), and the appropriate tests have been added.\r\n\r\nOne example where this behavior might be desirable is when setting cookies. You can do things like:\r\n\r\n```javascript\r\nres.set('Cookie', 'foo=bar', true);\r\n```\r\n\r\nand _NOT_ interfere with anyone else who has happened to also set a cookie for the response."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2454",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2454/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2454/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2454/events",
    "html_url": "https://github.com/strongloop/express/issues/2454",
    "id": 50466068,
    "number": 2454,
    "title": ".use path akwardly matches suffixes",
    "user": {
      "login": "dronus",
      "id": 1840405,
      "avatar_url": "https://avatars.githubusercontent.com/u/1840405?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dronus",
      "html_url": "https://github.com/dronus",
      "followers_url": "https://api.github.com/users/dronus/followers",
      "following_url": "https://api.github.com/users/dronus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dronus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dronus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dronus/subscriptions",
      "organizations_url": "https://api.github.com/users/dronus/orgs",
      "repos_url": "https://api.github.com/users/dronus/repos",
      "events_url": "https://api.github.com/users/dronus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dronus/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/3.x",
        "name": "3.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2014-11-30T18:34:55Z",
    "updated_at": "2014-12-01T15:32:45Z",
    "closed_at": "2014-11-30T19:47:48Z",
    "body": "If I bind a handler by `.use('/intern',intern_handler)`, it matches any 'path' derived from `/intern`, like `/intern` itself, and for example `/intern/account`. \r\n\r\nHowever, this handler triggers on `/intern.html` too. \r\n\r\nThe documentation states 'path can be a string representing a path', which gives the expectation of usual path-like logic. In the example above, it seems to be rather a prefix matching.\r\n\r\nHowever, `/internals` does NOT trigger this handler. This contradicts prefix matching either.\r\n\r\nSo what is the rationale behind .use path matching? Without a clear specification, I would consider this behaviour a bug."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2453",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2453/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2453/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2453/events",
    "html_url": "https://github.com/strongloop/express/pull/2453",
    "id": 50406613,
    "number": 2453,
    "title": "Expose layer to the current request.",
    "user": {
      "login": "izaakschroeder",
      "id": 206921,
      "avatar_url": "https://avatars.githubusercontent.com/u/206921?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/izaakschroeder",
      "html_url": "https://github.com/izaakschroeder",
      "followers_url": "https://api.github.com/users/izaakschroeder/followers",
      "following_url": "https://api.github.com/users/izaakschroeder/following{/other_user}",
      "gists_url": "https://api.github.com/users/izaakschroeder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/izaakschroeder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/izaakschroeder/subscriptions",
      "organizations_url": "https://api.github.com/users/izaakschroeder/orgs",
      "repos_url": "https://api.github.com/users/izaakschroeder/repos",
      "events_url": "https://api.github.com/users/izaakschroeder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/izaakschroeder/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/enhancement",
        "name": "enhancement",
        "color": "84b6eb"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/needs%20tests",
        "name": "needs tests",
        "color": "e11d21"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 21,
    "created_at": "2014-11-28T22:32:38Z",
    "updated_at": "2014-12-03T16:41:47Z",
    "closed_at": "2014-12-03T11:17:45Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2453",
      "html_url": "https://github.com/strongloop/express/pull/2453",
      "diff_url": "https://github.com/strongloop/express/pull/2453.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2453.patch"
    },
    "body": "Sometimes you wish to know something about the layer that is currently executing which cannot be provided by `req.route`, particularly because `req.route` is not available for the `.use()` family _and_ because the route object doesn't say which member of its stack it is currently executing.\r\n\r\nExample usage might be something like:\r\n\r\n```javascript\r\napp.use(function middleware(req, res, next) {\r\n    req.layer.handle === middleware; // true\r\n    console.log(req.layer.name);\r\n    next();\r\n});\r\n```\r\n\r\nThis change is non-breaking unless some existing middleware sets a `.layer` property on the `req` object in which case this will overwrite it."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2452",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2452/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2452/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2452/events",
    "html_url": "https://github.com/strongloop/express/issues/2452",
    "id": 50026438,
    "number": 2452,
    "title": "express-generator with gitignore [feature request]",
    "user": {
      "login": "zzz6519003",
      "id": 1625608,
      "avatar_url": "https://avatars.githubusercontent.com/u/1625608?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/zzz6519003",
      "html_url": "https://github.com/zzz6519003",
      "followers_url": "https://api.github.com/users/zzz6519003/followers",
      "following_url": "https://api.github.com/users/zzz6519003/following{/other_user}",
      "gists_url": "https://api.github.com/users/zzz6519003/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/zzz6519003/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/zzz6519003/subscriptions",
      "organizations_url": "https://api.github.com/users/zzz6519003/orgs",
      "repos_url": "https://api.github.com/users/zzz6519003/repos",
      "events_url": "https://api.github.com/users/zzz6519003/events{/privacy}",
      "received_events_url": "https://api.github.com/users/zzz6519003/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 2,
    "created_at": "2014-11-25T13:35:33Z",
    "updated_at": "2014-11-26T03:03:06Z",
    "closed_at": "2014-11-25T15:56:39Z",
    "body": "Hi, can we have it ?"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2451",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2451/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2451/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2451/events",
    "html_url": "https://github.com/strongloop/express/pull/2451",
    "id": 49871327,
    "number": 2451,
    "title": "Fix res.sendfile logging standard write errors",
    "user": {
      "login": "hex7c0",
      "id": 4419146,
      "avatar_url": "https://avatars.githubusercontent.com/u/4419146?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hex7c0",
      "html_url": "https://github.com/hex7c0",
      "followers_url": "https://api.github.com/users/hex7c0/followers",
      "following_url": "https://api.github.com/users/hex7c0/following{/other_user}",
      "gists_url": "https://api.github.com/users/hex7c0/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hex7c0/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hex7c0/subscriptions",
      "organizations_url": "https://api.github.com/users/hex7c0/orgs",
      "repos_url": "https://api.github.com/users/hex7c0/repos",
      "events_url": "https://api.github.com/users/hex7c0/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hex7c0/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/bug",
        "name": "bug",
        "color": "fc2929"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 3,
    "created_at": "2014-11-24T09:46:04Z",
    "updated_at": "2014-11-25T04:29:13Z",
    "closed_at": "2014-11-25T04:29:13Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2451",
      "html_url": "https://github.com/strongloop/express/pull/2451",
      "diff_url": "https://github.com/strongloop/express/pull/2451.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2451.patch"
    },
    "body": "releated to #2433 and b326ae89df48faac64f22be0eca0a86c87b203ee"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2450",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2450/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2450/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2450/events",
    "html_url": "https://github.com/strongloop/express/pull/2450",
    "id": 49853417,
    "number": 2450,
    "title": "Release 4.11",
    "user": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/pr",
        "name": "pr",
        "color": "006b75"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/release",
        "name": "release",
        "color": "000000"
      }
    ],
    "state": "closed",
    "locked": true,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": null,
    "comments": 5,
    "created_at": "2014-11-24T03:35:02Z",
    "updated_at": "2015-01-14T04:24:39Z",
    "closed_at": "2015-01-14T03:28:59Z",
    "pull_request": {
      "url": "https://api.github.com/repos/strongloop/express/pulls/2450",
      "html_url": "https://github.com/strongloop/express/pull/2450",
      "diff_url": "https://github.com/strongloop/express/pull/2450.diff",
      "patch_url": "https://github.com/strongloop/express/pull/2450.patch"
    },
    "body": "This is a tracking issue for release 4.11.\r\n\r\n**Please keep feature requests in their own issues**\r\n\r\nIf you want to make a comment on a particular change, please make the comment in the \"Files changed\" tab so comments are not lost during a rebase.\r\n\r\nList of changes for release:\r\n- [x] Add `res.append` to append headers #2455\r\n- [x] Deprecate `app.param(fn)` #2429\r\n- [x] Deprecate `app.param(':name', fn)`, where `':name'` has the leading colon #2430 \r\n- [x] Deprecate `req.param()` #2440\r\n- [x] Fix `OPTIONS` responses to include the `HEAD` method property #2459\r\n- [x] Match routes iteratively to prevent stack overflows #2412\r\n\r\n**Testing this release**\r\n\r\nIf you want to try out this release, you can install it with the following command:\r\n```bash\r\n$ npm install strongloop/express#4.11\r\n```\r\n\r\nOwners/collaborators: please do not merge this PR :)"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2449",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2449/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2449/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2449/events",
    "html_url": "https://github.com/strongloop/express/issues/2449",
    "id": 49768502,
    "number": 2449,
    "title": "Remove express.static",
    "user": {
      "login": "Fishrock123",
      "id": 1093990,
      "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Fishrock123",
      "html_url": "https://github.com/Fishrock123",
      "followers_url": "https://api.github.com/users/Fishrock123/followers",
      "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
      "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
      "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
      "repos_url": "https://api.github.com/users/Fishrock123/repos",
      "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/discuss",
        "name": "discuss",
        "color": "02d7e1"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/future",
        "name": "future",
        "color": "e102d8"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 8,
    "created_at": "2014-11-22T01:54:01Z",
    "updated_at": "2015-02-05T15:44:29Z",
    "closed_at": null,
    "body": "I haven't seen much discussion to if we are actually going to remove `static` from `express@5`.\r\n\r\n(People can always still require `serve-static`.)\r\n\r\n\r\nBasically it doesn't make much sense to have these things in express core, imo.\r\n\r\nWe'll build a better CLI generator for people who want this stuff easy."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2448",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2448/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2448/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2448/events",
    "html_url": "https://github.com/strongloop/express/issues/2448",
    "id": 49761796,
    "number": 2448,
    "title": "route handlers: performance bottleneck",
    "user": {
      "login": "altsang",
      "id": 2261105,
      "avatar_url": "https://avatars.githubusercontent.com/u/2261105?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/altsang",
      "html_url": "https://github.com/altsang",
      "followers_url": "https://api.github.com/users/altsang/followers",
      "following_url": "https://api.github.com/users/altsang/following{/other_user}",
      "gists_url": "https://api.github.com/users/altsang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/altsang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/altsang/subscriptions",
      "organizations_url": "https://api.github.com/users/altsang/orgs",
      "repos_url": "https://api.github.com/users/altsang/repos",
      "events_url": "https://api.github.com/users/altsang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/altsang/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/docs",
        "name": "docs",
        "color": "d4c5f9"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 19,
    "created_at": "2014-11-21T23:40:29Z",
    "updated_at": "2014-11-22T05:47:08Z",
    "closed_at": "2014-11-21T23:52:33Z",
    "body": "Is there something already being done or can be done about the array used as the data structure for storing route handlers as specified in this blog - http://techblog.netflix.com/2014/11/nodejs-in-flames.html\r\nas part of the phased router improvements @bajtos ?"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2447",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2447/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2447/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2447/events",
    "html_url": "https://github.com/strongloop/express/issues/2447",
    "id": 49737160,
    "number": 2447,
    "title": "express 4.10.2 issue with sinon fake timers",
    "user": {
      "login": "Rovack",
      "id": 6605826,
      "avatar_url": "https://avatars.githubusercontent.com/u/6605826?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Rovack",
      "html_url": "https://github.com/Rovack",
      "followers_url": "https://api.github.com/users/Rovack/followers",
      "following_url": "https://api.github.com/users/Rovack/following{/other_user}",
      "gists_url": "https://api.github.com/users/Rovack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Rovack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Rovack/subscriptions",
      "organizations_url": "https://api.github.com/users/Rovack/orgs",
      "repos_url": "https://api.github.com/users/Rovack/repos",
      "events_url": "https://api.github.com/users/Rovack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Rovack/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/wontfix",
        "name": "wontfix",
        "color": "ffffff"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 28,
    "created_at": "2014-11-21T19:16:54Z",
    "updated_at": "2014-11-26T14:35:15Z",
    "closed_at": "2014-11-21T19:52:19Z",
    "body": "When calling Sinon.JS's `useFakeTimers` with the most recent version of Express, requests sent to the app aren't answered.\r\n\r\nThis is caused by the commit titled \"Correctly invoke async router callback asynchronously\", which changed line 186 of `lib/router/index.js` from `return done(layerError)` to `setImmediate(done, layerError)`.\r\n\r\nWhen using fake timers, functions run using `setImmediate` don't execute until one explicitly ticks forward the clock.\r\n\r\nIt could be argued this isn't really a problem with Express, and rather the solution is to be sure to tick whenever one issues a request to the app. However, it's not entirely clear to me how this could be done, since one would have to know when Express got to that `setImmediate` call and only then tick. Further, even if it is possible, it's doubtful many existing tests do this, meaning this breaks a lot of existing code.\r\n\r\nPresumably this is also a problem with any other framework that manipulates `setImmediate`, not just Sinon."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2446",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2446/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2446/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2446/events",
    "html_url": "https://github.com/strongloop/express/issues/2446",
    "id": 49718887,
    "number": 2446,
    "title": "Parameters matching/Update path-to-regexp?",
    "user": {
      "login": "Lassi",
      "id": 700245,
      "avatar_url": "https://avatars.githubusercontent.com/u/700245?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lassi",
      "html_url": "https://github.com/Lassi",
      "followers_url": "https://api.github.com/users/Lassi/followers",
      "following_url": "https://api.github.com/users/Lassi/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lassi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lassi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lassi/subscriptions",
      "organizations_url": "https://api.github.com/users/Lassi/orgs",
      "repos_url": "https://api.github.com/users/Lassi/repos",
      "events_url": "https://api.github.com/users/Lassi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lassi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-11-21T16:39:35Z",
    "updated_at": "2014-11-21T22:32:32Z",
    "closed_at": "2014-11-21T16:57:16Z",
    "body": "Hi,\r\n\r\nI've noticed something weird about named parameters in routes. In our app, we use a route similar to this one:\r\n\r\n```js\r\napp.get('/concerts/:id*/videos', function (req, res) {});\r\n```\r\nwhere the id of a concert is a string formatted like that:\r\n\r\n```js\r\n'yyyy/mm/dd/venue/artist'\r\n```\r\nNow the problem is, if we hit that route:\r\n\r\n```js\r\n'/concerts/2014/11/21/venue/artist/videos'\r\n```\r\nthe field `req.params.id` isn't populated with the value `'2014/11/21/venue/artist'` as expected, it only contains the value `'2014'`.\r\n\r\nI was wondering if this is the intended behaviour or if this is a bug? I tried to update path-to-regexp from `0.1.3` to its latest version and then everything *seemed* to work just the way I though it would work."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2445",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2445/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2445/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2445/events",
    "html_url": "https://github.com/strongloop/express/issues/2445",
    "id": 49360965,
    "number": 2445,
    "title": "the same file has different ETag on two servers?",
    "user": {
      "login": "jackielihf",
      "id": 3974585,
      "avatar_url": "https://avatars.githubusercontent.com/u/3974585?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jackielihf",
      "html_url": "https://github.com/jackielihf",
      "followers_url": "https://api.github.com/users/jackielihf/followers",
      "following_url": "https://api.github.com/users/jackielihf/following{/other_user}",
      "gists_url": "https://api.github.com/users/jackielihf/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jackielihf/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jackielihf/subscriptions",
      "organizations_url": "https://api.github.com/users/jackielihf/orgs",
      "repos_url": "https://api.github.com/users/jackielihf/repos",
      "events_url": "https://api.github.com/users/jackielihf/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jackielihf/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-11-19T10:10:21Z",
    "updated_at": "2014-11-20T05:38:59Z",
    "closed_at": "2014-11-19T16:03:44Z",
    "body": "My webapp serves some static files, like:\r\n```js\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n```\r\nAnd it is deployed on two different servers (192.168.1.1 and 192.168.1.2).\r\nWhen I request one static file, they respond the same file with different ETags.\r\n```\r\ncurl -I http://192.168.1.1/webapp/img/1_1.png\r\nETag: \"3368-1416384949000\"\r\n```\r\n```\r\ncurl -I http://192.168.1.2/webapp/img/1_1.png\r\nETag: \"3368-1414576453000\"\r\n```\r\nSo I check the file \"1_1.png\" respectively with md5sum, they all are:\r\n\r\nmd5sum 1_1.png\r\nbf0d5bf5c87562d1bb668b8372550165  1_1.png"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2444",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2444/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2444/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2444/events",
    "html_url": "https://github.com/strongloop/express/issues/2444",
    "id": 49359065,
    "number": 2444,
    "title": "Signing payload with res.writeHead using Hawk authentication.",
    "user": {
      "login": "Dreyer",
      "id": 294523,
      "avatar_url": "https://avatars.githubusercontent.com/u/294523?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Dreyer",
      "html_url": "https://github.com/Dreyer",
      "followers_url": "https://api.github.com/users/Dreyer/followers",
      "following_url": "https://api.github.com/users/Dreyer/following{/other_user}",
      "gists_url": "https://api.github.com/users/Dreyer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Dreyer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Dreyer/subscriptions",
      "organizations_url": "https://api.github.com/users/Dreyer/orgs",
      "repos_url": "https://api.github.com/users/Dreyer/repos",
      "events_url": "https://api.github.com/users/Dreyer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Dreyer/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-11-19T09:56:18Z",
    "updated_at": "2014-11-25T09:44:46Z",
    "closed_at": "2014-11-19T16:13:32Z",
    "body": "I'm trying to implement [Hawk](https://github.com/hueniverse/hawk) authentication with Express and I need to decorate the `res.writeHead` in order to sign the response payload so that when I call `res.json` it adds the `Server-Authorization` header which is a HMAC of the body/payload.\r\n\r\nI understand from the [Node.js documentation](http://nodejs.org/api/http.html#http_response_writehead_statuscode_reasonphrase_headers) that you need to set the `res.writeHead` before `res.end` is called and I cannot seem to work out how to do it with middleware -- do I use `app.use` or `router.use`.\r\n\r\nIt's worth mentioning that I have multiple routes on what is effectively a simple RESTful API that responds mainly with JSON.\r\n\r\nMy only solution is to replace `res.send` with a custom function also called `res.send` and then attempt to sign the payload at that point before its sent.\r\n\r\nSo far I have the following in my custom middleware:\r\n\r\n```javascript\r\n                if (res._hawkEnabled) {\r\n                    next();\r\n                    return;\r\n                }\r\n\r\n                var send = res.send;\r\n                res._hawkEnabled = true;\r\n\r\n                res.send = function hawkSend(body) {\r\n                    var header = hawk.server.header(credentials, artifacts, {\r\n                        payload: body,\r\n                        contentType: res.get('Content-Type')\r\n                    });\r\n\r\n                    res.setHeader('Server-Authorization', header);\r\n\r\n                    send.call(res, body);\r\n                };\r\n\r\n                next();\r\n```"
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2443",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2443/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2443/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2443/events",
    "html_url": "https://github.com/strongloop/express/issues/2443",
    "id": 48855254,
    "number": 2443,
    "title": "Using `.all(myFunction)` doesn't work when making request from Android webview.",
    "user": {
      "login": "QuantumKing",
      "id": 235305,
      "avatar_url": "https://avatars.githubusercontent.com/u/235305?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/QuantumKing",
      "html_url": "https://github.com/QuantumKing",
      "followers_url": "https://api.github.com/users/QuantumKing/followers",
      "following_url": "https://api.github.com/users/QuantumKing/following{/other_user}",
      "gists_url": "https://api.github.com/users/QuantumKing/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/QuantumKing/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/QuantumKing/subscriptions",
      "organizations_url": "https://api.github.com/users/QuantumKing/orgs",
      "repos_url": "https://api.github.com/users/QuantumKing/repos",
      "events_url": "https://api.github.com/users/QuantumKing/events{/privacy}",
      "received_events_url": "https://api.github.com/users/QuantumKing/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 19,
    "created_at": "2014-11-14T23:58:09Z",
    "updated_at": "2014-11-15T05:41:12Z",
    "closed_at": "2014-11-15T03:54:55Z",
    "body": "When `myFunction` gets called, `req.body` and the headers I've set aren't there. However, if instead of using `.all` I do `.post(myFunction, function(req, res) { ... })`, everything works fine. I've only seen this issue when making a request from an Android webview."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2442",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2442/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2442/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2442/events",
    "html_url": "https://github.com/strongloop/express/issues/2442",
    "id": 48732628,
    "number": 2442,
    "title": "release 4.10.2 breaks compatibility with node 0.8.x",
    "user": {
      "login": "aoberoi",
      "id": 494795,
      "avatar_url": "https://avatars.githubusercontent.com/u/494795?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aoberoi",
      "html_url": "https://github.com/aoberoi",
      "followers_url": "https://api.github.com/users/aoberoi/followers",
      "following_url": "https://api.github.com/users/aoberoi/following{/other_user}",
      "gists_url": "https://api.github.com/users/aoberoi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aoberoi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aoberoi/subscriptions",
      "organizations_url": "https://api.github.com/users/aoberoi/orgs",
      "repos_url": "https://api.github.com/users/aoberoi/repos",
      "events_url": "https://api.github.com/users/aoberoi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aoberoi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 7,
    "created_at": "2014-11-14T05:24:14Z",
    "updated_at": "2014-11-14T15:37:47Z",
    "closed_at": "2014-11-14T14:57:58Z",
    "body": "setImmediate is undefined. consider using https://www.npmjs.org/package/setimmediate to shim the implementation."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2441",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2441/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2441/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2441/events",
    "html_url": "https://github.com/strongloop/express/issues/2441",
    "id": 48644289,
    "number": 2441,
    "title": "Callback to router.param listener function should be last argument",
    "user": {
      "login": "OliverJAsh",
      "id": 921609,
      "avatar_url": "https://avatars.githubusercontent.com/u/921609?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/OliverJAsh",
      "html_url": "https://github.com/OliverJAsh",
      "followers_url": "https://api.github.com/users/OliverJAsh/followers",
      "following_url": "https://api.github.com/users/OliverJAsh/following{/other_user}",
      "gists_url": "https://api.github.com/users/OliverJAsh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/OliverJAsh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/OliverJAsh/subscriptions",
      "organizations_url": "https://api.github.com/users/OliverJAsh/orgs",
      "repos_url": "https://api.github.com/users/OliverJAsh/repos",
      "events_url": "https://api.github.com/users/OliverJAsh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/OliverJAsh/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/5.x",
        "name": "5.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/ideas",
        "name": "ideas",
        "color": "d7e102"
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 3,
    "created_at": "2014-11-13T14:52:51Z",
    "updated_at": "2014-11-22T00:49:17Z",
    "closed_at": null,
    "body": "See my listener function to `router.param`. The `next` callback is third (not last).\r\n\r\n``` js\r\nrouter.param('foo', function (req, res, next, paramValue, paramKeyName) {\r\n});\r\n```\r\n\r\n99% of the time, functions that receive callbacks will receive the callback last. Could we change this for consistency? It would be a breaking change, of course.\r\n\r\n``` js\r\nrouter.param('foo', function (req, res, paramValue, paramKeyName, next) {\r\n});\r\n```\r\n\r\nFor the record, I am trying to intercept functions that receive callbacks so that I can author promises instead, which is why I need the callback to be last: https://gist.github.com/OliverJAsh/0c755bd05219fb8011cf.\r\n\r\nHaving the callback last is not standardised anywhere AFAIK, but it's a reasonable expectation as that's how the pattern normally goes. I'm surely not the only person programmatically accessing the callback via `arguments."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2440",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2440/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2440/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2440/events",
    "html_url": "https://github.com/strongloop/express/issues/2440",
    "id": 48614368,
    "number": 2440,
    "title": "Deprecate req.param() ",
    "user": {
      "login": "hacksparrow",
      "id": 950112,
      "avatar_url": "https://avatars.githubusercontent.com/u/950112?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hacksparrow",
      "html_url": "https://github.com/hacksparrow",
      "followers_url": "https://api.github.com/users/hacksparrow/followers",
      "following_url": "https://api.github.com/users/hacksparrow/following{/other_user}",
      "gists_url": "https://api.github.com/users/hacksparrow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hacksparrow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hacksparrow/subscriptions",
      "organizations_url": "https://api.github.com/users/hacksparrow/orgs",
      "repos_url": "https://api.github.com/users/hacksparrow/repos",
      "events_url": "https://api.github.com/users/hacksparrow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hacksparrow/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/4.x",
        "name": "4.x",
        "color": "ededed"
      },
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/deprecate",
        "name": "deprecate",
        "color": "f7c6c7"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": {
      "login": "dougwilson",
      "id": 67512,
      "avatar_url": "https://avatars.githubusercontent.com/u/67512?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dougwilson",
      "html_url": "https://github.com/dougwilson",
      "followers_url": "https://api.github.com/users/dougwilson/followers",
      "following_url": "https://api.github.com/users/dougwilson/following{/other_user}",
      "gists_url": "https://api.github.com/users/dougwilson/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dougwilson/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dougwilson/subscriptions",
      "organizations_url": "https://api.github.com/users/dougwilson/orgs",
      "repos_url": "https://api.github.com/users/dougwilson/repos",
      "events_url": "https://api.github.com/users/dougwilson/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dougwilson/received_events",
      "type": "User",
      "site_admin": false
    },
    "milestone": {
      "url": "https://api.github.com/repos/strongloop/express/milestones/12",
      "html_url": "https://github.com/strongloop/express/milestones/4.11",
      "labels_url": "https://api.github.com/repos/strongloop/express/milestones/12/labels",
      "id": 875792,
      "number": 12,
      "title": "4.11",
      "description": null,
      "creator": {
        "login": "Fishrock123",
        "id": 1093990,
        "avatar_url": "https://avatars.githubusercontent.com/u/1093990?v=3",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Fishrock123",
        "html_url": "https://github.com/Fishrock123",
        "followers_url": "https://api.github.com/users/Fishrock123/followers",
        "following_url": "https://api.github.com/users/Fishrock123/following{/other_user}",
        "gists_url": "https://api.github.com/users/Fishrock123/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Fishrock123/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Fishrock123/subscriptions",
        "organizations_url": "https://api.github.com/users/Fishrock123/orgs",
        "repos_url": "https://api.github.com/users/Fishrock123/repos",
        "events_url": "https://api.github.com/users/Fishrock123/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Fishrock123/received_events",
        "type": "User",
        "site_admin": false
      },
      "open_issues": 0,
      "closed_issues": 3,
      "state": "open",
      "created_at": "2014-11-21T15:17:15Z",
      "updated_at": "2015-01-14T03:28:59Z",
      "due_on": null,
      "closed_at": null
    },
    "comments": 13,
    "created_at": "2014-11-13T09:23:55Z",
    "updated_at": "2015-03-10T07:31:17Z",
    "closed_at": "2015-01-14T03:28:59Z",
    "body": "Because it is better to make it obvious where you are getting the parameters from: `req.params`, `req.body`, or  `req.query`.\r\n\r\nKeeping it will encourage developers to use it, which can potentially cause hard to debug or confusing issues.\r\n\r\nAlso, `req.param() ` is a utility function, which should be at the application level, not in the framework."
  },
  {
    "url": "https://api.github.com/repos/strongloop/express/issues/2439",
    "labels_url": "https://api.github.com/repos/strongloop/express/issues/2439/labels{/name}",
    "comments_url": "https://api.github.com/repos/strongloop/express/issues/2439/comments",
    "events_url": "https://api.github.com/repos/strongloop/express/issues/2439/events",
    "html_url": "https://github.com/strongloop/express/issues/2439",
    "id": 48440613,
    "number": 2439,
    "title": "How to dispatch route ?",
    "user": {
      "login": "riston",
      "id": 782237,
      "avatar_url": "https://avatars.githubusercontent.com/u/782237?v=3",
      "gravatar_id": "",
      "url": "https://api.github.com/users/riston",
      "html_url": "https://github.com/riston",
      "followers_url": "https://api.github.com/users/riston/followers",
      "following_url": "https://api.github.com/users/riston/following{/other_user}",
      "gists_url": "https://api.github.com/users/riston/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/riston/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/riston/subscriptions",
      "organizations_url": "https://api.github.com/users/riston/orgs",
      "repos_url": "https://api.github.com/users/riston/repos",
      "events_url": "https://api.github.com/users/riston/events{/privacy}",
      "received_events_url": "https://api.github.com/users/riston/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "url": "https://api.github.com/repos/strongloop/express/labels/question",
        "name": "question",
        "color": "cc317c"
      }
    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "milestone": null,
    "comments": 1,
    "created_at": "2014-11-11T21:54:36Z",
    "updated_at": "2014-11-11T22:03:29Z",
    "closed_at": "2014-11-11T22:03:29Z",
    "body": "Is it possible to dispatch some certain route programmatically like, ```app.dispatch('get', '/foo', { params, querystrign ... } ``` ?"
  }
]
